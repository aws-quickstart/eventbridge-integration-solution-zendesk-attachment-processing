AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  eventbridge-integration-solution-zendesk-attachment-processing

  (qs-1qpmal5co)

Metadata:
  AWS::ServerlessRepo::Application:
    Name: Amazon-EventBridge-Integration-Solution-Zendesk-Attachment-Processing
    Description: This application demonstrates processing Zendesk ticket attachments using AWS Step Functions, AWS Lambda, and the Zendesk Amazon EventBridge Integration.
    Author: AWS Quick Start
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['amazon', 'eventbridge', 'integration', 'solution', 'lambda', 'step_functions', 'aws', 'attachment']
    HomePageUrl: https://github.com/aws-quickstart/eventbridge-integration-solution-zendesk-attachment-processing
    SemanticVersion: 0.1.1
    SourceCodeUrl: https://github.com/aws-quickstart/eventbridge-integration-solution-zendesk-attachment-processing
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Amazon EventBridge Integration Solution
      Parameters:
      - EventSourceName
    - Label: 
        default: Amazon S3 Bucket for Attachment Files
      Parameters:
      - BucketName
    - Label:
        default: Zendesk Configuration
      Parameters:
      - ZendeskAPIToken
      - ZendeskEmail
      - ZendeskSubdomain
    ParameterLabels:
      EventSourceName:
        default: Event Source Name
      BucketName:
        default: Bucket Name
      ZendeskAPIToken:
        default: API Token
      ZendeskEmail:
        default: Email
      ZendeskSubdomain:
        default: Subdomain

Parameters:
  # Follow instructions in the EventBridge console to set up Zendesk as a partner event source.
  # Pass the partner event source name as your EventSourceName parameter.
  # Ex: aws.partner/zendesk.com/1234/default
  EventSourceName:
    Type: String
    AllowedPattern: aws\.partner(/[\.\-_A-Za-z0-9]+){2,}
    MinLength: 1
    MaxLength: 256
    Description: Name of the Zendesk Partner Event Source to associate with an Event Bus. For example, aws.partner/zendesk.com/1234/default
  ZendeskAPIToken:
    Type: String
    NoEcho: true
    MinLength: 1
    Description: The Zendesk API token used to access the Zendesk API
  ZendeskEmail:
    Type: String
    MinLength: 1
    Description: The Zendesk agent email used for Zendesk API access
  ZendeskSubdomain:
    Type: String
    MinLength: 1
    Description: The Zendesk subdomain which is a unique identifier of your Zendesk account
  BucketName:
    Type: String
    Default: ''
    AllowedPattern: '[a-zA-Z0-9.-]*'
    MaxLength: 63
    Description: Name of the Amazon S3 Bucket to create to store Zendesk attachment files for processing. Leave blank for an automatically generated name.

Globals:
  Function:
    Timeout: 30
    Runtime: python3.8

Conditions:
  AutoGenerateBucketName:
    !Equals [ !Ref BucketName, '' ]

Resources:
# EventBridge
  ZendeskEventBus:
    Type: AWS::Events::EventBus
    Properties:
      EventSourceName: !Ref EventSourceName
      Name: !Ref EventSourceName

# S3 bucket
  AttachmentFileBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        !If [ AutoGenerateBucketName, !Ref 'AWS::NoValue', !Ref BucketName ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

# Lambda functions
  GetAttachment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: src/get_attachment
      Description: A function that retrieves a file attached to a Zendesk comment.
      Policies:
      - S3WritePolicy:
          BucketName: !Ref AttachmentFileBucket
      Environment:
        Variables:
          S3_BUCKET: !Ref AttachmentFileBucket

  GetText:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: src/get_text
      Description: A function that extracts text from a given file using Textract.
      Policies:
      - TextractPolicy: {}
      - S3ReadPolicy:
          BucketName: !Ref AttachmentFileBucket
      Environment:
        Variables:
          S3_BUCKET: !Ref AttachmentFileBucket
  
  DetectImages:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: src/detect_images
      Description: A function that analyizes images from a given file using Textract.
      Policies:
      - RekognitionDetectOnlyPolicy: {}
      - S3ReadPolicy:
          BucketName: !Ref AttachmentFileBucket
      Environment:
        Variables:
          S3_BUCKET: !Ref AttachmentFileBucket

  PostComment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: src/post_comment
      Description: A function that posts the extracted text and objects detected in a comment on the Zendesk ticket.
      Environment:
        Variables:
          ZENDESK_EMAIL: !Ref ZendeskEmail
          ZENDESK_SUBDOMAIN: !Ref ZendeskSubdomain
          ZENDESK_TOKEN: !Ref ZendeskAPIToken

# Step Functions state machine
  AttachmentProcessor:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: GetAttachment
        States:
          GetAttachment:
            Type: Task
            Resource: !GetAtt GetAttachment.Arn
            Next: isSupportedFileType
          isSupportedFileType:
            Type: Choice
            Choices:
            - Variable: "$.accepted_file_type"
              BooleanEquals: true
              Next: GetTextAndImages
            - Variable: "$.accepted_file_type"
              BooleanEquals: false
              Next: UnsupportedFileTypeSucceed
            Default: FileTypeCheckFail
          UnsupportedFileTypeSucceed:
            Type: Succeed
          FileTypeCheckFail:
            Type: Fail
            Cause: Could not determine if supported or unsupported file type.
          GetTextAndImages:
            Type: Parallel
            Next: PostComment
            Branches:
              - StartAt: GetText
                States:
                  GetText: 
                    Type: Task
                    Resource: !GetAtt GetText.Arn
                    End: true
              - StartAt: DetectImages
                States:
                  DetectImages:
                    Type: Task
                    Resource: !GetAtt DetectImages.Arn
                    End: true
          PostComment:
            Type: Task
            Resource: !GetAtt PostComment.Arn
            End: true
      Events:
        EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref ZendeskEventBus
            Pattern:
              account:
              - !Ref "AWS::AccountId"
              detail-type:
              - "Support Ticket: Attachment Linked to Comment"
      Policies:
      - LambdaInvokePolicy:
          FunctionName: !Ref GetAttachment
      - LambdaInvokePolicy:
          FunctionName: !Ref GetText
      - LambdaInvokePolicy:
          FunctionName: !Ref DetectImages
      - LambdaInvokePolicy:
          FunctionName: !Ref PostComment
      Type: STANDARD

Outputs:
  EventBridgeEventBus:
    Description: SaaS Event Bus ARN
    Value: !GetAtt ZendeskEventBus.Arn
  EventBridgeRule:
    Description: Implicit EventBridge Rule ARN
    Value: !GetAtt AttachmentProcessorEventBridgeRule.Arn
  AttachmentProcessor:
    Description: AttachmentProcessor state machine ARN
    Value: !Ref AttachmentProcessor
  AttachmentProcessorIamRole:
    Description: Implicit IAM Role created for AttachmentProcessor state machine 
    Value: !GetAtt AttachmentProcessorRole.Arn
  GetAttachmentFunction:
    Description: GetAttachment Function ARN
    Value: !GetAtt GetAttachment.Arn
  GetAttachmentFunctionIamRole:
    Description: Implicit IAM Role created for GetAttachment Function
    Value: !GetAtt GetAttachmentRole.Arn
  GetTextFunction:
    Description: GetText Function ARN
    Value: !GetAtt GetText.Arn
  GetTextFunctionIamRole:
    Description: Implicit IAM Role created for GetText Function
    Value: !GetAtt GetTextRole.Arn
  DetectImagesFunction:
    Description: DetectImages Function ARN
    Value: !GetAtt DetectImages.Arn
  DetectImagesFunctionIamRole:
    Description: Implicit IAM Role created for DetectImages Function
    Value: !GetAtt DetectImagesRole.Arn
  PostCommentFunction:
    Description: PostComment Function ARN
    Value: !GetAtt PostComment.Arn
  PostCommentFunctionIamRole:
    Description: Implicit IAM Role created for PostComment Function
    Value: !GetAtt PostCommentRole.Arn
  S3Bucket:
    Description: S3 Bucket to save attachments for processing
    Value: !GetAtt AttachmentFileBucket.Arn
